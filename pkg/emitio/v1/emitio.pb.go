// Code generated by protoc-gen-go. DO NOT EDIT.
// source: emitio/v1/emitio.proto

package emitio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmitRequest struct {
	Spans                []*Span  `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmitRequest) Reset()         { *m = EmitRequest{} }
func (m *EmitRequest) String() string { return proto.CompactTextString(m) }
func (*EmitRequest) ProtoMessage()    {}
func (*EmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitio_532ecb9ebb7deb11, []int{0}
}
func (m *EmitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmitRequest.Unmarshal(m, b)
}
func (m *EmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmitRequest.Marshal(b, m, deterministic)
}
func (dst *EmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmitRequest.Merge(dst, src)
}
func (m *EmitRequest) XXX_Size() int {
	return xxx_messageInfo_EmitRequest.Size(m)
}
func (m *EmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmitRequest proto.InternalMessageInfo

func (m *EmitRequest) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

// EmitResponse is currently empty but present as a placeholder for the future.
type EmitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmitResponse) Reset()         { *m = EmitResponse{} }
func (m *EmitResponse) String() string { return proto.CompactTextString(m) }
func (*EmitResponse) ProtoMessage()    {}
func (*EmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_emitio_532ecb9ebb7deb11, []int{1}
}
func (m *EmitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmitResponse.Unmarshal(m, b)
}
func (m *EmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmitResponse.Marshal(b, m, deterministic)
}
func (dst *EmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmitResponse.Merge(dst, src)
}
func (m *EmitResponse) XXX_Size() int {
	return xxx_messageInfo_EmitResponse.Size(m)
}
func (m *EmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EmitRequest)(nil), "EmitRequest")
	proto.RegisterType((*EmitResponse)(nil), "EmitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmitIOClient is the client API for EmitIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmitIOClient interface {
	Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error)
}

type emitIOClient struct {
	cc *grpc.ClientConn
}

func NewEmitIOClient(cc *grpc.ClientConn) EmitIOClient {
	return &emitIOClient{cc}
}

func (c *emitIOClient) Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error) {
	out := new(EmitResponse)
	err := c.cc.Invoke(ctx, "/EmitIO/Emit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmitIO service

type EmitIOServer interface {
	Emit(context.Context, *EmitRequest) (*EmitResponse, error)
}

func RegisterEmitIOServer(s *grpc.Server, srv EmitIOServer) {
	s.RegisterService(&_EmitIO_serviceDesc, srv)
}

func _EmitIO_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitIOServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmitIO/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitIOServer).Emit(ctx, req.(*EmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmitIO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EmitIO",
	HandlerType: (*EmitIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _EmitIO_Emit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitio/v1/emitio.proto",
}

func init() { proto.RegisterFile("emitio/v1/emitio.proto", fileDescriptor_emitio_532ecb9ebb7deb11) }

var fileDescriptor_emitio_532ecb9ebb7deb11 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xcd, 0xcd, 0x2c,
	0xc9, 0xcc, 0xd7, 0x2f, 0x33, 0xd4, 0x87, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0xa5, 0x44,
	0x10, 0xe2, 0xc5, 0x05, 0x89, 0x79, 0x10, 0x51, 0x25, 0x2d, 0x2e, 0x6e, 0xd7, 0xdc, 0xcc, 0x92,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x69, 0x2e, 0x56, 0x90, 0x64, 0xb1, 0x04, 0xa3,
	0x02, 0xb3, 0x06, 0xb7, 0x11, 0xab, 0x5e, 0x70, 0x41, 0x62, 0x5e, 0x10, 0x44, 0x4c, 0x89, 0x8f,
	0x8b, 0x07, 0xa2, 0xb6, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0xd5, 0x48, 0x9f, 0x8b, 0x0d, 0xc4, 0xf7,
	0xf4, 0x17, 0x52, 0xe5, 0x62, 0x01, 0xb1, 0x84, 0x78, 0xf4, 0x90, 0x0c, 0x93, 0xe2, 0xd5, 0x43,
	0x56, 0xae, 0xc4, 0x90, 0xc4, 0x06, 0xb6, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xa3,
	0x5f, 0x85, 0xa3, 0x00, 0x00, 0x00,
}
